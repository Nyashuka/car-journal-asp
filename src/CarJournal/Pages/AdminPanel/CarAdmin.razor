@page "/admin/cars"
@attribute [Authorize(Roles = "admin")]

@using CarJournal.Domain
@using System.Net.Http.Json
@using CarJournal.Services
@using CarJournal.Services.Cars
@using CarJournal.Services.Vendors
@using CarJournal.ClientDtos

@inject ICarService _carService
@inject IAdminVendorService _vendorsService
@inject IGenericService<Gearbox> _gearboxesService
@inject IGenericService<BodyType> _bodyTypesService
@inject IGenericService<Engine> _engineService
@inject IGenericService<FuelType> _fuelTypeService

@if(_isCreating)
{
<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
    <MudStack Style="width: 400px; margin: 0 10px;" Row="true" StretchItems="StretchItems.All">
        <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Class="mb-4"
                    OnClick="@CloseCreateMenu">
            Back
        </MudButton>
        <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Class="mb-4" OnClick="@CreateCar">
            Create
        </MudButton>
    </MudStack>

    <MudStack Style="width: 400px; margin: 0 10px;">
        <MudTextField @bind-Value="CarDto.Model" Label="Model" Variant="@_variant" />
        <MudTextField @bind-Value="CarDto.Series" Label="Series" Variant="@_variant" />
        <MudTextField @bind-Value="CarDto.Year" Label="Year of ..." Variant="@_variant" />

        <MudAutocomplete T="Vendor" Label="Vendor" @bind-Value="CarDto.Vendor" SearchFunc="@SearchVendor"
            ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Variant="@_variant"/>
        <MudAutocomplete T="Gearbox" Label="Gearbox" @bind-Value="CarDto.Gearbox" SearchFunc="@SearchGearbox"
            ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Variant="@_variant"/>
        <MudAutocomplete T="FuelType" Label="Fuel" @bind-Value="CarDto.FuelType" SearchFunc="@SearchFuelType"
            ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Variant="@_variant"/>
        <MudAutocomplete T="BodyType" Label="Body" @bind-Value="CarDto.BodyType" SearchFunc="@SearchBodyType"
            ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Variant="@_variant"/>
        <MudAutocomplete T="Engine" Label="Engine" @bind-Value="CarDto.Engine" SearchFunc="@SearchEngine"
            ToStringFunc="@(e=> e==null?null : $"{e.Model}")" Variant="@_variant"/>
    </MudStack>
</MudStack>
}
else
{
    <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Class="mb-4" OnClick="@OpenCreateMenu">Add new Car</MudButton>

    <MudDataGrid T="Car" Items="@_cars" Bordered="true" Dense="true" SortMode="@SortMode.Single" ReadOnly="@_readOnly"
        EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
        StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem"
        CommittedItemChanges="@CommittedItemChanges"
        EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Cars</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.Id" Title="#" Editable="false" HeaderStyle="width: 5%;" />
            <PropertyColumn Property="x => x.Vendor.Name" Title="Vendor" />
            <PropertyColumn Property="x => x.Model" Title="Model" />
            <PropertyColumn Property="x => x.Series" Title="Series" />
            <TemplateColumn CellClass="d-flex justify-end" HeaderStyle="width: 5%;">
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                            OnClick="@context.Actions.StartEditingItemAsync" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteRecord(@context.Item))" aria-label="delete" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>

        </Columns>
        <PagerContent>
            <MudDataGridPager T="Car" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private Variant _variant = Variant.Outlined;

    private MudDataGrid<Car> _dataGrid = new MudDataGrid<Car>();

    private List<Car> _cars = new List<Car>();
    // creating
    private bool _isCreating = false;

    private CreateCarDto CarDto { get; set; } = new();
    private List<Vendor> _vendors = new List<Vendor>();
    private List<Gearbox> _gearboxes = new List<Gearbox>();
    private List<FuelType> _fuelTypes = new List<FuelType>();
    private List<BodyType> _bodyTypes = new List<BodyType>();
    private List<Engine> _engines = new List<Engine>();

    protected override async Task OnInitializedAsync()
    {
        _cars = (await _carService.GetAllCarsWithDetailsAsync()).ToList();
    }

    private async void OpenCreateMenu()
    {
        _isCreating = true;
        _vendors = await _vendorsService.GetAllAsync();
        _gearboxes = (await _gearboxesService.GetAllAsync()).ToList();
        _fuelTypes = (await _fuelTypeService.GetAllAsync()).ToList();
        _bodyTypes = (await _bodyTypesService.GetAllAsync()).ToList();
        _engines = (await _engineService.GetAllAsync()).ToList();
    }

    private void CloseCreateMenu()
    {
        _isCreating = false;
    }

    private async Task CreateCar()
    {
        var car = new Car(0, CarDto.Model, CarDto.Series,
                            CarDto.Year, CarDto.Vendor.Id,
                            CarDto.BodyType.Id, CarDto.Engine.Id,
                            CarDto.Gearbox.Id, CarDto.FuelType.Id);

        _cars.Add(await _carService.CreateCarAsync(car));

        CloseCreateMenu();
    }

    // editing
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    private string TextValue { get; set; } = string.Empty;

    // events
    void StartedEditingItem(Car item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Car item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Car item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    private Task OnSearch(string text)
    {
        TextValue = text;
        return _dataGrid.ReloadServerData();
    }

    private void DeleteRecord(Car record)
    {
        _carService.DeleteCarAsync(record.Id);
        _cars.Remove(record);
    }

    private async Task<IEnumerable<Vendor>> SearchVendor(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return _vendors;

        return _vendors.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Gearbox>> SearchGearbox(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return _gearboxes;

        return _gearboxes.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<FuelType>> SearchFuelType(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return _fuelTypes;

        return _fuelTypes.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<BodyType>> SearchBodyType(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return _bodyTypes;

        return _bodyTypes.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Engine>> SearchEngine(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return _engines;

        return _engines.Where(x => x.Model.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}