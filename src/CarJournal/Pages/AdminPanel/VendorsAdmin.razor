@page "/admin/vendors"
@attribute [Authorize(Roles = "admin")]

@using CarJournal.Domain
@using System.Net.Http.Json

<MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" Class="mb-4">Add new Vendor</MudButton>

<MudDataGrid T="Vendor" Items="@_vendors"
            Bordered="true" Dense="true" SortMode="@SortMode.Single"
            ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
            StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Vendors</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Id" Title="#" Editable="false" HeaderStyle="width: 5%;"/>
        <PropertyColumn Property="x => x.Name" Title="Name"  FlexGrow="1"/>
        <TemplateColumn CellClass="d-flex justify-end" HeaderStyle="width: 5%;">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"/>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>

    </Columns>
    <PagerContent>
        <MudDataGridPager T="Vendor" />
    </PagerContent>
</MudDataGrid>


@code {
    private MudDataGrid<Vendor> dataGrid;
    private List<Vendor> _vendors = new List<Vendor>()
    {
        new Vendor(1, "BMW"),
        new Vendor(2, "Volvo")
    };

    public string TextValue { get; set; } = string.Empty;

    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
    }

    // events
    void StartedEditingItem(Vendor item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Vendor item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Vendor item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    private Task OnSearch(string text)
    {
        TextValue = text;
        return dataGrid.ReloadServerData();
    }
}